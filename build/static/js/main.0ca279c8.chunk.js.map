{"version":3,"sources":["components/Buscador.js","components/Imagen.js","components/Paginacion.js","components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","BusquedaRef","React","createRef","e","preventDefault","termino","this","current","value","props","datosBusqueda","target","reset","react_default","a","createElement","onSubmit","obtenerDatos","bind","className","type","ref","placeholder","Component","Imagen","_props$imagen","imagen","largeImageURL","likes","previewURL","tags","views","src","alt","href","rel","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imgs","_this","imagenes","length","Fragment","components_Paginacion","map","components_Imagen","key","id","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","pagina","consultarApi","state","prevState","console","log","_this2","url","concat","fetch","then","respuesta","json","resultado","hits","components_Buscador","components_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMA6BeA,6MA1BXC,YAAcC,IAAMC,wFACPC,GACTA,EAAEC,iBAEF,IAAMC,EAAUC,KAAKN,YAAYO,QAAQC,MAEzCF,KAAKG,MAAMC,cAAcL,GAGzBF,EAAEQ,OAAOC,yCAGT,OACIC,EAAAC,EAAAC,cAAA,QAAMC,SAAUV,KAAKW,aAAaC,KAAKZ,OACnCO,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,uBACXN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,IAAKf,KAAKN,YAAasB,YAAY,kBAAkBH,UAAU,kCAEtFN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,uBACXN,EAAAC,EAAAC,cAAA,SAAOK,KAAK,SAASZ,MAAM,SAASW,UAAU,+CApB/CI,aCgBRC,MAhBf,SAAgBf,GAAM,IAAAgB,EACkChB,EAAMiB,OAAnDC,EADWF,EACXE,cAAcC,EADHH,EACGG,MAAMC,EADTJ,EACSI,WAAWC,EADpBL,EACoBK,KAAKC,EADzBN,EACyBM,MAC3C,OACIlB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,0CACXN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACXN,EAAAC,EAAAC,cAAA,OAAKiB,IAAKH,EAAYI,IAAKH,EAAMX,UAAU,iBAC3CN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACXN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,aAAaS,EAA1B,aACAf,EAAAC,EAAAC,cAAA,KAAGI,UAAU,aAAaY,EAA1B,WACAlB,EAAAC,EAAAC,cAAA,KAAGmB,KAAMP,EAAehB,OAAO,SAASwB,IAAI,sBAAsBhB,UAAU,oCAA5E,kBCALiB,MATf,SAAoB3B,GAChB,OACII,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACXN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,oBAAoBkB,QAAS5B,EAAM6B,gBAArD,mBACAzB,EAAAC,EAAAC,cAAA,UAAQI,UAAU,eAAekB,QAAS5B,EAAM8B,iBAAhD,qBC2BGC,6MA5BXC,gBAAkB,WACd,IAAMC,EAAOC,EAAKlC,MAAMmC,SACxB,OAAmB,IAAhBF,EAAKG,OAAsB,KAE1BhC,EAAAC,EAAAC,cAACF,EAAAC,EAAMgC,SAAP,KACIjC,EAAAC,EAAAC,cAACgC,EAAD,CACIT,eAAgBK,EAAKlC,MAAM6B,eAC3BC,gBAAiBI,EAAKlC,MAAM8B,kBAEhC1B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,kBACVuB,EAAKM,IAAI,SAAAtB,GACN,OAAOb,EAAAC,EAAAC,cAACkC,EAAD,CAAQvB,OAAQA,EAAQwB,IAAKxB,EAAOyB,QAGnDtC,EAAAC,EAAAC,cAACgC,EAAD,CACIT,eAAgBK,EAAKlC,MAAM6B,eAC3BC,gBAAiBI,EAAKlC,MAAM8B,4FAOxC,OACI1B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgC,SAAA,KAAGxC,KAAKmC,0BAzBIlB,aCqET6B,cApEb,SAAAA,EAAY3C,GAAM,IAAAkC,EAAA,OAAAU,OAAAC,EAAA,EAAAD,CAAA/C,KAAA8C,IAChBT,EAAAU,OAAAE,EAAA,EAAAF,CAAA/C,KAAA+C,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAnD,KAAMG,KAkBRC,cAAgB,SAACL,GACfsC,EAAKe,SAAS,CACZrD,UACAsD,OAAO,GACP,WACAhB,EAAKiB,kBAxBSjB,EA2BlBL,eAAiB,WACf,GAAyB,IAAtBK,EAAKkB,MAAMF,OACZ,OAAO,KACAhB,EAAKkB,MAAMF,OAAQ,IAC1BhB,EAAKe,SAAS,SAACI,GACb,MAAO,CAACH,OAAOG,EAAUH,OAAS,IAClC,WACAhB,EAAKiB,iBAEPG,QAAQC,IAAIrB,EAAKkB,MAAMF,UApCThB,EAuClBJ,gBAAkB,WAChBI,EAAKe,SAAS,SAACI,GACb,MAAO,CAACH,OAAOG,EAAUH,OAAS,IAClC,WACAhB,EAAKiB,iBAEPG,QAAQC,IAAIrB,EAAKkB,MAAMF,SA3CvBhB,EAAKkB,MAAM,CACTxD,QAAQ,GACRuC,SAAS,GACTe,OAAO,IALOhB,8EAQJ,IAAAsB,EAAA3D,KACN4D,EAAG,qEAAAC,OAAyE7D,KAAKuD,MAAMxD,QAApF,sBAAA8D,OAAgH7D,KAAKuD,MAAMF,QAEpIS,MAAMF,GACHG,KAAK,SAAAC,GAAS,OAAEA,EAAUC,SAC1BF,KAAK,SAAAG,GACJP,EAAKP,SAAS,CACZd,SAAU4B,EAAUC,0CAiC1B,OACE5D,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,aACbN,EAAAC,EAAAC,cAAA,KAAGI,UAAU,oBAAb,wBACAN,EAAAC,EAAAC,cAAC2D,EAAD,CACAhE,cAAeJ,KAAKI,iBAGtBG,EAAAC,EAAAC,cAAA,OAAKI,UAAU,8BACbN,EAAAC,EAAAC,cAAC4D,EAAD,CACE/B,SAAUtC,KAAKuD,MAAMjB,SACrBN,eAAgBhC,KAAKgC,eACrBC,gBAAiBjC,KAAKiC,2BA7DhBhB,aCQEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.0ca279c8.chunk.js","sourcesContent":["import React,{Component} from 'react'\n\nclass Buscador extends Component{\n    BusquedaRef = React.createRef()\n    obtenerDatos(e){\n        e.preventDefault()\n\n        const termino = this.BusquedaRef.current.value\n        //le enviamos el contenido al componente principal\n        this.props.datosBusqueda(termino)\n\n\n        e.target.reset()\n    }\n    render(){\n        return(\n            <form onSubmit={this.obtenerDatos.bind(this)}>\n                <div className=\"row\">\n                    <div className=\"form-group col-md-8\" >\n                        <input type=\"text\" ref={this.BusquedaRef} placeholder=\"Busca tu imagen\" className=\"form-control form-control-lg\"/>\n                    </div>\n                    <div className=\"form-group col-md-4\" >\n                        <input type=\"submit\" value=\"Buscar\" className=\"btn btn-primary btn-lg btn-block\"/>\n                    </div>\n                </div>\n            </form>\n        )\n    }\n}\nexport default Buscador","import React from 'react'\n\nfunction Imagen(props){\n    const {largeImageURL,likes,previewURL,tags,views} = props.imagen\n    return(\n        <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4\">\n            <div className=\"card\">\n                <img src={previewURL} alt={tags} className=\"card-img-top\"/>\n                <div className=\"card-body\">\n                    <p className=\"card-text\">{likes} Me gusta</p>\n                    <p className=\"card-text\">{views} Vistas</p>\n                    <a href={largeImageURL} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-success btn-lg btn-block\">Ver imagen</a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Imagen","import React from 'react'\n\nfunction Paginacion(props){\n    return(\n        <div className=\"py-3\">\n            <button className=\"btn btn-info mr-1\" onClick={props.paginaAnterior}>&larr; Anterior</button>\n            <button className=\"btn btn-info\" onClick={props.paginaSiguiente}>Siguente &rarr;</button>\n        </div>\n    )\n}\n\nexport default Paginacion","import React,{Component} from 'react'\nimport Imagen from './Imagen'\nimport Paginacion from './Paginacion'\n\nclass Resultado extends Component{\n    mostrarImagenes = ()=>{\n        const imgs = this.props.imagenes\n        if(imgs.length === 0 ) return null\n        return(\n            <React.Fragment>\n                <Paginacion\n                    paginaAnterior={this.props.paginaAnterior}\n                    paginaSiguiente={this.props.paginaSiguiente}\n                />\n                <div className=\"col-12 p-5 row\">\n                    {imgs.map(imagen=>{\n                        return <Imagen imagen={imagen} key={imagen.id}/>\n                    })}\n                </div>\n                <Paginacion\n                    paginaAnterior={this.props.paginaAnterior}\n                    paginaSiguiente={this.props.paginaSiguiente}\n                />\n            </React.Fragment>\n        )\n    }\n    \n    render(){\n        return(\n            <>{this.mostrarImagenes()}</>\n        )\n    }\n}\nexport default Resultado","import React,{Component} from 'react';\nimport Buscador from './components/Buscador'\nimport Resultado from './components/Resultado'\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      termino:\"\",\n      imagenes:[],\n      pagina:\"\"\n    }\n  }\n  consultarApi(){\n    const url  = `https://pixabay.com/api/?key=12855090-59cd4b72f781b2479ba90911f&q=${this.state.termino}&per_page=30&page=${this.state.pagina}`/* \n    console.log(url) */\n    fetch(url)\n      .then(respuesta=>respuesta.json())\n      .then(resultado=>{\n        this.setState({\n          imagenes: resultado.hits\n        })\n      })\n  }\n  datosBusqueda = (termino)=>{\n    this.setState({\n      termino,\n      pagina:1\n    },()=>{\n      this.consultarApi()\n    })\n  }\n  paginaAnterior = ()=>{\n    if(this.state.pagina === 1){\n      return null\n    }else if(this.state.pagina >1){\n      this.setState((prevState)=>{\n        return {pagina:prevState.pagina - 1}\n      },()=>{\n        this.consultarApi()\n      })\n      console.log(this.state.pagina)\n    }\n  }\n  paginaSiguiente = ()=>{\n    this.setState((prevState)=>{\n      return {pagina:prevState.pagina + 1}\n    },()=>{\n      this.consultarApi()\n    })\n    console.log(this.state.pagina)\n  }\n  render(){\n    return (\n      <div className=\"App container\">\n        <div className=\"jumbotron\">\n          <p className=\"lead text-center\" >Buscador de imagenes</p>\n          <Buscador \n          datosBusqueda={this.datosBusqueda}\n          />\n        </div>\n        <div className=\"row justify-content-center\">\n          <Resultado\n            imagenes={this.state.imagenes}\n            paginaAnterior={this.paginaAnterior}\n            paginaSiguiente={this.paginaSiguiente}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}